import itertools
import json
from pathlib import Path
from pprint import pp
from random import random
from typing import Any
from brp.libs.datagen import DatasetGenerator
from brp.libs.indexer import Bucket, Data, Index
from brp.libs.lsh import _BRPModel, BucketedRandomProjection


class Main:
    def run() -> None:
        # dataset_file: Path = Path("datasets/randomized/rand_dataset.json")
        # dataset: list[dict[str, Any]] = json.load(
        #     dataset_file.open("r", encoding="utf-8")
        # )
        # index: Index = Index(Path(".databases/.index.sqlite3"), force_init=True)
        # index.populate(dataset)
        index: Index = Index(Path(".databases/.index.sqlite3"), force_init=False)
        brp: BucketedRandomProjection = BucketedRandomProjection(
            num_hyperplanes=10, bucket_size=1.0
        )
        model: _BRPModel = brp.build_model(index, force_init=False)
        query: Data = Data(
            raw="Query",
            embedding=(
                -4.590273876357326,
                0.10369347710947574,
                5.853715612824793,
                -2.3718759701214456,
                -3.0034682614336927,
                -2.3346831001701513,
                1.052597019576712,
                2.0882595767968013,
                -1.4300250086575477,
                -2.88307713015105,
                -1.6790566043684385,
                5.823272219625446,
                4.417081904060035,
                -1.0873584225160946,
                0.23575357519847429,
                0.7467567342069842,
                -0.5512280971667943,
                4.192323007575229,
                3.576854125558217,
                -1.2148749512310548,
                -4.768374679200452,
                -2.5907130476785833,
                -1.7547356729695265,
                0.005264466083439334,
                -1.7839069421457152,
                1.4449811094411342,
                -3.5564472530437854,
                3.345296225331283,
                -2.6745859513615295,
                3.1751610803830213,
                3.5459983411846383,
                0.9562754299813228,
                -0.059850614840067484,
                2.820155648665366,
                -0.7636189460300762,
                0.699344601871061,
                -0.6525021667049621,
                1.716332368137441,
                1.1829540244433958,
                -3.3481422071298015,
                -0.04078647604247265,
                -2.3078810761164683,
                3.591527540957123,
                5.339071528565901,
                2.796569725466257,
                -3.7554981301518997,
                1.1842237050625433,
                5.54529226504188,
                0.5708436556455382,
                -4.8560291660952615,
                2.3296474660285487,
                5.498035886067345,
                5.498755513187523,
                5.174755675662447,
                2.5443898721038494,
                4.7749124108580565,
                1.1328530212207333,
                3.2327463627283284,
                2.90913215536877,
                -0.500849269718387,
                2.0778786717260482,
                -2.790228303838206,
                3.9577029340818743,
                -0.35588527818745574,
                5.003010984833774,
                1.531241670045087,
                5.36120594846464,
                -4.412044090718491,
                3.1389372915868283,
                1.9142902789982292,
                -1.5486648645493413,
                -2.7589561642868237,
                -2.3805441482494047,
                -3.5702264383605193,
                5.7381256227641435,
                -2.413348020783741,
                -2.479288800117903,
                1.6936551168453997,
                4.1328211296825,
                -4.648953602570576,
                -4.363078603020563,
                1.1811449549308688,
                0.6790381281738086,
                -0.5607651321016173,
                2.7135563136860004,
                -2.8699201873238995,
                0.9797682569612322,
                -4.089233077586086,
                -1.9033526184366885,
                -4.840175833546932,
                4.81303027852471,
                -1.2933911060335648,
                5.18828158678456,
                -0.7457820565301784,
                1.858049644664804,
                -2.3501803460603092,
                4.09574342994401,
                0.19002040471874126,
                0.4753818294663513,
                0.9615775118733023,
            ),
        )
        result = model.get_approximate_nearest_neighbors(query.embedding, k=5)
        pp(result)


if __name__ == "__main__":
    Main.run()
